{"version":3,"sources":["../src/index.js"],"names":["app","use","express","static","__dirname","server","http","createServer","setInterval","calculateHighScores","AllUsers","Array","Top5Users","IsMutexEnabled","bodyParser","json","limit","config","bodyLimit","sort","a","b","highscores","points","length","slice","forEach","push","element","get","req","res","render","post","body","name","undefined","word","cookies","uuid","updateScore","Score","listen","process","env","PORT","port","console","log","address"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport middleware from './middleware';\nimport highscores from './models/interface/scores'\nimport config from './config.json';\nimport { Score } from './models/classes/score';\nimport scores from './api/scores';\nlet app = express();\napp.use(express.static(__dirname));\napp.server = http.createServer(app);\n\nsetInterval(calculateHighScores, 1500)\n\nvar AllUsers = new Array();\nvar Top5Users = new Array();\nvar IsMutexEnabled = false;\n\n// logger for debug purposes\n// app.use(morgan('dev'));\n\napp.use(bodyParser.json({\n\tlimit: config.bodyLimit\n}));\n\n\n/**\n * This function calculates the high score every 1500milis.\n * As this function is called from the SetInterval which is Async, we want a mutex \n * so as to \"lock\" the object and all the players to submit a new word during the calculation of the highscores.\n */\nfunction calculateHighScores() {\n\tIsMutexEnabled = true;\n\tTop5Users = new Array();\n\tAllUsers.sort(function (a, b) {\n\t\treturn highscores[b].points - highscores[a].points\n\t})\n\tif (AllUsers.length >= 5) {\n\t\tAllUsers.slice(0, 5).forEach(element => {\n\t\t\tTop5Users.push(highscores[element])\n\t\t})\n\t} else {\n\t\tAllUsers.forEach(element => {\n\t\t\tTop5Users.push(highscores[element])\n\t\t})\n\t}\n\tIsMutexEnabled = false;\n}\n\napp.use(middleware({ app })); //the first level of middleware\napp.get('/', function (req, res) {\n\tres.render('index.html');\n});\napp.get('/api/getScores', function (req, res) {\n\tif (Top5Users.length === 0) {\n\t\tcalculateHighScores()\n\t}\n\tres.json(Top5Users)\n})\n\napp.post('/api/submitEntry', function (req, res) {\n\tif (req.body.name === undefined || req.body.word === undefined) {\n\t\tres.json(\"Bad request\");\n\t\treturn;\n\t}\n\tvar name = req.body.name\n\tvar word = req.body.word\n\tif (IsMutexEnabled) {\n\t\tres.json(\"The turn is over\");\n\t}\n\tif (highscores[req.cookies.uuid] !== undefined) {\n\t\thighscores[req.cookies.uuid].updateScore(word)\n\t} else {\n\t\thighscores[req.cookies.uuid] = new Score(name, word)\n\t\tAllUsers.push(req.cookies.uuid)\n\t}\n\t// if (AllUsers.includes(req.cookies.uuid) === false) {\n\t// \tAllUsers.push(req.cookies.uuid)\n\t// }\n\tres.json(highscores[req.cookies.uuid].points)\n})\n\napp.server.listen(process.env.PORT || config.port, () => {\n\tconsole.log(`Started on port ${app.server.address().port}`);\n});\n\nexport default app;\n"]}